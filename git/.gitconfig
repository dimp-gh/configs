[user]
	name = Dmitry Andreevich
	email = dmand@yandex.ru
[core]
	editor = nano
	excludesfile = "~/.gitignore"
[color]
        ui = true
[cola]
	fontdiff = Ubuntu Mono,11,-1,5,50,0,0,0,0,0
[gui]
	editor = nano
	historybrowser = qgit
[alias]
	co = checkout
	st = status
	lg = log --graph --pretty=format:'%Cred%h%Creset %ad %s %C(yellow)%d%Creset %C(bold blue)<%an>%Creset' --date=short
	hist = log --graph --full-history --all --pretty=format:'%Cred%h%Creset %ad %s %C(yellow)%d%Creset %C(bold blue)<%an>%Creset' --date=short
        last = "!git log | head -1 | awk '{print $2}'"
 
	branch-name = "!git rev-parse --abbrev-ref HEAD"
	publish = "!git push -u origin $(git branch-name)"
	unpublish = "!git push origin :$(git branch-name)" 
 
	# Given a merge commit, find the span of commits that exist(ed) on that
	# branch. Not so useful in itself, but used by other aliases.
	merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"
 
	# Find the commits that were introduced by a merge
	merge-log = "!git log `git merge-span .. $1`"
	# Show the changes that were introduced by a merge
	merge-diff = "!git diff `git merge-span ... $1`"
	# As above, but in your difftool
	merge-difftool = "!git difftool `git merge-span ... $1`"
 
	# Unstage any files that have been added to the staging area
	unstage = reset HEAD
	# Show changes that have been staged
	diffc = diff --cached
	
	# Mark a file as "assume unchanged", which means that Git will treat it
	# as though there are no changes to it even if there are. Useful for
	# temporary changes to tracked files
	assume = update-index --assume-unchanged
	# Reverse the above
	unassume = update-index --no-assume-unchanged
	# Show the files that are currently assume-unchanged
	assumed = "!git ls-files -v | grep ^h | cut -c 3-"
